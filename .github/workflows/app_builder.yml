name: App Builder

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: yarn install # change this to npm or pnpm depending on which one you use.

      - name: Download SQLite3 (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          curl -LO https://www.sqlite.org/2023/sqlite-dll-win64-x64-3400100.zip
          unzip -q sqlite-dll-win64-x64-3400100.zip -d sqlite3 || echo "Failed to unzip sqlite-dll-win64-x64-3400100.zip"
          curl -LO https://www.sqlite.org/2023/sqlite-tools-win32-x86-3400100.zip
          unzip -q sqlite-tools-win32-x86-3400100.zip -d sqlite3 || echo "Failed to unzip sqlite-tools-win32-x86-3400100.zip"

      - name: Verify SQLite3 Download (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          if [ ! -f "sqlite3/sqlite3.dll" ]; then
            echo "sqlite3.dll not found. Download failed."
            exit 1
          fi
          if [ ! -f "sqlite3/sqlite3.exe" ]; then
            echo "sqlite3.exe not found. Download failed."
            exit 1
          fi

      - name: Set up environment variables (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          echo "CGO_LDFLAGS=-L${{ github.workspace }}\\sqlite3" >> $GITHUB_ENV
          echo "CGO_CFLAGS=-I${{ github.workspace }}\\sqlite3" >> $GITHUB_ENV
          echo "${{ github.workspace }}\\sqlite3" >> $GITHUB_PATH

      - name: Build Tauri app
        run: yarn tauri build # or the appropriate build command for your setup

      - name: Create or update release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Laszlos-app v${{ github.ref_name }}"
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./src-tauri/target/release/bundle/macos/*.dmg # Change the path based on your build output
          asset_name: "rust-react-desktop_${{ github.ref_name }}.dmg"
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}